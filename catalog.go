// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"ru": &dictionary{index: ruIndex, data: ruData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"Location: %f;%f. Last AQI: %s": 1,
	"You have %d subscription(s)":   0,
}

var enIndex = []uint32{ // 3 elements
	0x00000000, 0x0000001f, 0x00000046,
} // Size: 36 bytes

const enData string = "" + // Size: 70 bytes
	"\x02You have %[1]d subscription(s)\x02Location: %[1]f;%[2]f. Last AQI: %" +
	"[3]s"

var ruIndex = []uint32{ // 3 elements
	0x00000000, 0x00000000, 0x00000000,
} // Size: 36 bytes

const ruData string = ""

// Total table size 142 bytes (0KiB); checksum: 72EF1CF1
